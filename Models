#######Encoder(Feature Extraction(Resnet18))
class Encoder(nn.Module):

    def __init__(self):
   
        super(Encoder, self).__init__()
        backbone=models.resnet18(pretrained=True)
        self.l1 =nn.Sequential(*list(backbone.children())[:-2])
        # Resize image to custom size:14*14
        self.adaptive_pool = nn.AdaptiveAvgPool2d((14, 14))
        self.fine_tune()


    def forward(self,x):
         
      y = self.l1(x)  
      y = self.adaptive_pool(y)
      y=y.permute(0, 2, 3, 1)
     
      return y 

    def fine_tune(self, fine_tune=True):
        #untrainable resnet18 params 
        for p in self.l1.parameters():
            p.requires_grad = False 

        for c in list(self.l1)[5:]:
            for p in c.parameters():
                p.requires_grad = fine_tune
                
                
Encode_img=Encoder().to(device)


######Attention################################################
class Attention(nn.Module):

    def __init__(self,encoder_dim, decoder_dim, attention_dim):
        super(Attention, self).__init__()

        #we want to make a linear relation between attention and both encoder and decoder
        self.encoder_att = nn.Linear(encoder_dim, attention_dim)
        self.decoder_att = nn.Linear(decoder_dim, attention_dim)
        self.full_att = nn.Linear(attention_dim, 1) 
        self.relu = nn.ReLU()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, encoder_out, decoder_hidden):
      y1 = self.encoder_att( encoder_out)# (batch_size, num_pixels, attention_dim)
      y2= self.decoder_att(decoder_hidden)# (batch_size, attention_dim)
      y= self.full_att(self.relu(y1 + y2.unsqueeze(1))).squeeze(2)

      alpha = self.softmax(y) 
      attention_weighted_encoding = (encoder_out * alpha.unsqueeze(2)).sum(dim=1)
      

      return attention_weighted_encoding, alpha

######DecoderwithAttention##################################
class DecoderWithAttention(nn.Module):
  def __init__(self, attention_dim, embed_dim, decoder_dim, vocab_size, encoder_dim=512, dropout=0.5):
      super(DecoderWithAttention, self).__init__()

      self.encoder_dim = encoder_dim
      self.attention_dim = attention_dim
      self.embed_dim = embed_dim
      self.decoder_dim = decoder_dim
      self.vocab_size = vocab_size
      self.dropout = dropout

      self.attention = Attention(encoder_dim, decoder_dim, attention_dim)  # attention network

      
      self.embedding = nn.Embedding(vocab_size, embed_dim)  # embedding layer
      self.dropout = nn.Dropout(p=self.dropout)
      self.decode_step = nn.LSTMCell(embed_dim + encoder_dim, decoder_dim, bias=True) 
      self.init_h = nn.Linear(encoder_dim, decoder_dim)  # linear layer to find initial hidden state of LSTMCell
      self.init_c = nn.Linear(encoder_dim, decoder_dim)  # linear layer to find initial cell state of LSTMCell

      self.f_beta = nn.Linear(decoder_dim, encoder_dim)  # linear layer to create a sigmoid-activated gate
      self.sigmoid = nn.Sigmoid()
      self.fc = nn.Linear(decoder_dim, vocab_size)  # linear layer to find scores over vocabulary(search in build_vocab)

      self.init_weights()  



  ###uniform embedding weights 
  def init_weights(self):
    #Initializes some parameters with values from the uniform distribution, for easier convergence
    self.embedding.weight.data.uniform_(-0.1, 0.1)
    self.fc.bias.data.fill_(0)
    self.fc.weight.data.uniform_(-0.1, 0.1)

  ###replace 
  def load_pretrained_embeddings(self, embeddings):
      self.embedding.weight = nn.Parameter(embeddings)




  ####initialize weights of hidden and cell state with features extracted from images 
  def init_hidden_state(self, encoder_out):

        mean_encoder_out = encoder_out.mean(dim=1)
        h = self.init_h(mean_encoder_out)  # (batch_size, decoder_dim)
        # print("mean_encoder_out",mean_encoder_out.shape)
        c = self.init_c(mean_encoder_out)
        return h, c




  def forward(self, encoder_out, encoded_captions, caption_lengths,max_caption_length):
 
        ###encoder_out=(batch,14,14,2048)
        batch_size = encoder_out.size(0)    #batch_size=batch
        encoder_dim = encoder_out.size(-1)  #encoder_dim=2048
        vocab_size = self.vocab_size        #vocab_size=len(embed.vocab)

        ###flatten image
        encoder_out = encoder_out.view(batch_size, -1, encoder_dim)  # (batch_size, num_pixels, encoder_dim)
        
        num_pixels = encoder_out.size(1)


        ##### Sort input data by decreasing lengths; to prevent extra compution on padding 
       
        Caption_lengths, sort_ind = caption_lengths.unsqueeze(1).sort(dim=0, descending=True)
        caption_lengths=Caption_lengths.squeeze(1)

        encoder_out = encoder_out[sort_ind].squeeze(1)
    
        encoded_captions=encoded_captions.reshape(batch_size,max_caption_length)
  
        encoded_captions = encoded_captions[sort_ind].squeeze(1)

        decode_lengths = (caption_lengths - 1).tolist()

        # Embedding
     
        embeddings = self.embedding(encoded_captions)  # (batch_size, max_caption_length, embed_dim)

        h, c = self.init_hidden_state(encoder_out)  # (batch_size, decoder_dim)

        # Create tensors to hold word predicion scores and alphas
        predictions = torch.zeros(batch_size, max(decode_lengths), vocab_size).to(device)
        alphas = torch.zeros(batch_size, max(decode_lengths), num_pixels).to(device)
        encoded_captions=encoded_captions[:,:max(decode_lengths)]
     

        
        for t in range(max(decode_lengths)):
          
           batch_size_t = sum([l > t for l in decode_lengths]) 
           
           attention_weighted_encoding, alpha = self.attention(encoder_out[:batch_size_t],
                                                                h[:batch_size_t])
       
           gate = self.sigmoid(self.f_beta(h[:batch_size_t])) 
           attention_weighted_encoding = gate * attention_weighted_encoding

           h, c = self.decode_step(
               torch.cat([embeddings[:batch_size_t, t, :], attention_weighted_encoding], dim=1),
               (h[:batch_size_t], c[:batch_size_t]))  # (batch_size_t, decoder_dim)

           preds = self.fc(self.dropout(h))  # (batch_size_t, vocab_size)
           #print("preds",preds.shape)
           predictions[:batch_size_t, t, :] = preds
           alphas[:batch_size_t, t, :] = alpha
           

        return predictions,encoded_captions, decode_lengths, alphas,sort_ind


decoder=DecoderWithAttention(attention_dim=512, embed_dim=100, decoder_dim=100, vocab_size=10002, encoder_dim=512, dropout=0.5).to(device)



